let busyDates = [];
let currentMonth;
let currentYear;

let selectedDate = null;
let selectedTime = null;

const urlParams = new URLSearchParams(window.location.search);
const selectedDuration = parseInt(urlParams.get("duration_minutes")) || 15;
const selectedServiceID = urlParams.get("service_id");
const selectedId = urlParams.get("client_id");
const selectedChatId = urlParams.get("chat_id");



// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
if (!selectedServiceID || !selectedId || !selectedChatId) {
    alert("–ù–µ –≤—Å—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–µ—Ä–µ–¥–∞–Ω—ñ –∑ Telegram. –ü–µ—Ä–µ–≤—ñ—Ä URL –∞–±–æ –æ–Ω–æ–≤—ñ—Ç—å –¥–æ–¥–∞—Ç–æ–∫.");
}


// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–Ω—è—Ç—ã—Ö –¥–∞—Ç
async function fetchBusyDates(year, month) {
    const response = await fetch(`/api/busy-days?year=${year}&month=${month + 1}&duration=${selectedDuration}`);
    const data = await response.json();
    busyDates = data;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
function sendDataToServer() {
    if (!(selectedDate && selectedTime)) return;

    fetch("/api/submit", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ date: selectedDate, time: selectedTime, serviceI: selectedServiceID,  user: selectedId, duration:  selectedDuration, chatID:selectedChatId}),
    })
    .then(response => response.json())
    .then(data => {
        if (data.status === "success") {
            if (window.Telegram.WebApp) {
        window.Telegram.WebApp.close();
      }
        } /*else {
            alert("–û—à–∏–±–∫–∞: " + data.message);
        }
    })
    .catch(err => {
        alert("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: " + err.message);
    */});
}
// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
function fetchFreeSlots(date) {
    return fetch(`/api/free-slots?date=${date}&duration=${selectedDuration}&service_id=${selectedServiceID}`)
        .then(response => response.json())
        .catch(error => {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤:", error);
            return [];
        });
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
function renderCalendar() {
    const monthNames = [
        "–°—ñ—á–µ–Ω—å", "–õ—é—Ç–∏–π", "–ë–µ—Ä–µ–∑–µ–Ω—å", "–ö–≤—ñ—Ç–µ–Ω—å", "–¢—Ä–∞–≤–µ–Ω—å", "–ß–µ—Ä–≤–µ–Ω—å",
        "–õ–∏–ø–µ–Ω—å", "–°–µ—Ä–ø–µ–Ω—å", "–í–µ—Ä–µ—Å–µ–Ω—å", "–ñ–æ–≤—Ç–µ–Ω—å", "–õ–∏—Å—Ç–æ–ø–∞–¥", "–ì—Ä—É–¥–µ–Ω—å"
    ];

    document.querySelector(".month_name").textContent = monthNames[currentMonth] + " " + currentYear;

    const firstDay = new Date(currentYear, currentMonth, 1);
    const startDay = (firstDay.getDay() + 6) % 7;
    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();

    const dataContainer = document.querySelector(".data");
    dataContainer.innerHTML = "";

    for (let i = 0; i < startDay; i++) {
        const empty = document.createElement("div");
        dataContainer.appendChild(empty);
    }

    for (let i = 1; i <= daysInMonth; i++) {
        const button = document.createElement("button");
        button.type = "button";
        button.textContent = i;

        const buttonDate = new Date(currentYear, currentMonth, i);
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        buttonDate.setHours(0, 0, 0, 0);

        const isoDate = buttonDate.getFullYear() + "-" +
            String(buttonDate.getMonth() + 1).padStart(2, "0") + "-" +
            String(buttonDate.getDate()).padStart(2, "0");

        if (buttonDate < today) {
            button.disabled = true;
        }

        if (busyDates.includes(isoDate)) {
            button.disabled = true;
            button.classList.add("busy");
        }

        button.addEventListener("click", () => {
            selectedDate = isoDate;
            selectedTime = null;
            updateConfirmButtonState();
            highlightSelectedDate(button);
            showAvailableTimeSlots(isoDate);
        });

        dataContainer.appendChild(button);
    }
}

// –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
function highlightSelectedDate(selectedBtn) {
    const buttons = document.querySelectorAll(".data button");
    buttons.forEach(btn => btn.classList.remove("selected"));
    selectedBtn.classList.add("selected");
}

// –ü–æ–∫–∞–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
function showAvailableTimeSlots(date) {
    const container = document.querySelector("#time-slots");
    container.innerHTML = "‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–ª—å–Ω–æ–≥–æ —á–∞—Å—É...";

    fetchFreeSlots(date).then(slots => {
        container.innerHTML = "";
        if (!slots.length) {
            container.textContent = "üö´ –ù–µ–º–∞—î –≤—ñ–ª—å–Ω–æ–≥–æ —á–∞—Å—É –Ω–∞ —Ü—é –¥–∞—Ç—É.";
            return;
        }

        const wrapper = document.createElement("div");
        wrapper.classList.add("time-slots");

        slots.forEach(slot => {
            const btn = document.createElement("button");
            btn.type = "button";
            btn.textContent = slot;
            btn.classList.add("time-slot-btn");

            btn.addEventListener("click", () => {
                selectedTime = slot;
                updateConfirmButtonState();
                highlightSelectedTime(btn);
            });

            wrapper.appendChild(btn);
        });

        container.appendChild(wrapper);
    });
}

// –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
function highlightSelectedTime(selectedBtn) {
    const buttons = document.querySelectorAll(".time-slot-btn");
    buttons.forEach(btn => btn.classList.remove("active"));
    selectedBtn.classList.add("active");
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏"
function updateConfirmButtonState() {
    const btn = document.querySelector("#confirm-button");
    btn.disabled = !(selectedDate && selectedTime);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram WebApp
function sendDataToTelegram() {
    if (window.Telegram && window.Telegram.WebApp) {
        const data = { date: selectedDate, time: selectedTime };
        window.Telegram.WebApp.sendData(JSON.stringify(data));
        console.log("–î–∞–Ω—ñ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ –≤ Telegram:", data);
    } else {
        console.log("Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.");
        alert("Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.");
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("DOMContentLoaded", () => {
    const now = new Date();
    currentMonth = now.getMonth();
    currentYear = now.getFullYear();

    fetchBusyDates(currentYear, currentMonth).then(() => {
        renderCalendar();
    });

    document.querySelector(".prev").addEventListener("click", () => {
        if (currentMonth === 0) {
            currentMonth = 11;
            currentYear--;
        } else {
            currentMonth--;
        }
        selectedDate = null;
        selectedTime = null;
        updateConfirmButtonState();
        fetchBusyDates(currentYear, currentMonth).then(() => {
            renderCalendar();
            document.querySelector("#time-slots").innerHTML = "";
        });
    });

    document.querySelector(".next").addEventListener("click", () => {
        if (currentMonth === 11) {
            currentMonth = 0;
            currentYear++;
        } else {
            currentMonth++;
        }
        selectedDate = null;
        selectedTime = null;
        updateConfirmButtonState();
        fetchBusyDates(currentYear, currentMonth).then(() => {
            renderCalendar();
            document.querySelector("#time-slots").innerHTML = "";
        });
    });

    // –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏"
    const confirmBtn = document.createElement("button");
    confirmBtn.id = "confirm-button";
    confirmBtn.textContent = "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏";
    confirmBtn.disabled = true;
    confirmBtn.style.position = "fixed";
    confirmBtn.style.bottom = "10px";
    confirmBtn.style.left = "50%";
    confirmBtn.style.transform = "translateX(-50%)";
    confirmBtn.style.padding = "12px 24px";
    confirmBtn.style.fontSize = "1.2rem";
    confirmBtn.style.borderRadius = "8px";
    confirmBtn.style.border = "none";
    confirmBtn.style.backgroundColor = "#2a9df4";
    confirmBtn.style.color = "white";
    confirmBtn.style.cursor = "pointer";
    confirmBtn.style.zIndex = "1000";

    confirmBtn.addEventListener("click", () => {
        sendDataToTelegram();
        sendDataToServer();
    });

    document.body.appendChild(confirmBtn);
});

