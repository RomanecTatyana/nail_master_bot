from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, WebAppInfo
from aiogram.filters import Command
from ..constants import BTN_APPOINT
from bot.keyboards.menu import build_services_keyboard
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot.database.connection import get_pool
from aiogram.fsm.context import FSMContext
from urllib.parse import quote
from urllib.parse import urlencode
router = Router()

#–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–∞
@router.message(Command("appoints"))
async def appoints_hendler(message: Message):
    try:
        telegram_id = message.from_user.id
        pool = get_pool()
        async with pool.acquire() as conn:
            rows = await conn.fetch('''
                                    SELECT a.id, a.client_id, a.service_id, a.appointment_date, a.start_time,
                                           s.service_name
                                    FROM appointments a
                                    JOIN services s ON a.service_id=s.id
                                    WHERE a.client_id = (SELECT id FROM clients WHERE telegram_id = $1)
                                        AND a.stat = $2
                                    ORDER BY a.appointment_date, a.start_time
                                    ''', telegram_id, "active")
            if not rows:
                await message.answer("üòî –ù–∞–∂–∞–ª—å, –í–∞—à–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                return
            
            response = "üíÖ <b>–í–∞—à—ñ –∑–∞–ø–∏—Å–∏:</b>\n\n"
            appointments = []
            i = 1
            for row in rows:
                response += f"{i}. <b><u>{row['appointment_date']} –æ {row['start_time']}</u></b>\n    {row['service_name']}\n\n"
                i += 1
                appointments.append([row['appointment_date'], row['start_time'] ])
            response += "–©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å –æ–±–µ—Ä—ñ—Ç—å –π–æ–≥–æ –Ω–∏–∂—á–µ üëá"
            
            # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑–∞–ø–∏—Å—É
            builder = InlineKeyboardBuilder()
            for row in rows:
                builder.button(
                    text=f"{row['appointment_date']} –æ  {row['start_time']} ",
                    callback_data=f"choose_appointment:{row['id']}",
                )
            builder.adjust(2)  # –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
            
            await message.answer(response, reply_markup=builder.as_markup(), parse_mode="HTML")    
            
    except Exception as e:
        await message.answer("üö® –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å—ñ–≤.")
        print(f"[appoints_hendler] Error: {e}")    

#–•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
@router.message(F.text == BTN_APPOINT)
async def appoint_button_handler(message: Message):
    await appoints_hendler(message)
    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
@router.callback_query(F.data.startswith("choose_appointment:"))
async def choose_appointment_hendler(callback: CallbackQuery, state: FSMContext):
    try:
        _, id_str = callback.data.split(":")
        id = int(id_str)
        telegram_id = callback.from_user.id
        pool = get_pool()
        async with pool.acquire() as conn:
            #–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å
            row = await conn.fetchrow('''
                                    SELECT a.appointment_date, a.start_time,
                                           s.service_name
                                    FROM appointments a
                                    JOIN services s ON a.service_id=s.id
                                    WHERE a.id = $1
                                    ''', id) 
            if not row:
                await callback.message.answer("–ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.")
                return  
        #–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
            await conn.execute('''
                           UPDATE appointments
                           SET stat = 'canceled'
                           WHERE id = $1
                ''', id)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            date = row["appointment_date"]
            time = row["start_time"]
            service = row["service_name"]

            await callback.message.answer(f"‚ùå –í–∏ —Å–∫–∞—Å—É–≤–∞–ª–∏ –∑–∞–ø–∏—Å:\n\nüóì {date} –æ {time}\nüíÖ {service}")

            await callback.answer() 
    except Exception as e:
        print(f"[choose_appointment_handler] Error: {e}")
        await callback.message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É")    