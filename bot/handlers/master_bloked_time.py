from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from bot.database.connection import get_pool
from bot.constants import BTN_MASTER_NO_WORK
from bot.bot_utils import MasterBlockedTime
from aiogram.filters import StateFilter
from datetime import datetime
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

router = Router()

# 1Ô∏è‚É£ –•–µ–Ω–¥–ª–µ—Ä ‚Äî —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
@router.message(F.text == BTN_MASTER_NO_WORK)
async def master_no_work_handler(message: Message, state: FSMContext):
    try:
        await state.set_state(MasterBlockedTime.waiting_for_blocked_time)
        
        inline_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_blocked_time")]
        ])
        
        await message.answer(
            "–í–≤–µ–¥–∏ –¥–∞—Ç—É, —á–∞—Å –ø–æ—á–∞—Ç–∫—É, —á–∞—Å –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ç–∞ –ø—Ä–∏—á–∏–Ω—É —á–µ—Ä–µ–∑ ;\n\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n2025-07-02;10:30;13:00;–ù–µ —Ö–æ—á—É –ø—Ä–∞—Ü—é–≤–∞—Ç–∏",
            reply_markup=inline_kb
        )
    except Exception as e:
        print(f"[master_no_work_handler] Error: {e}")
        await message.answer("üö® –°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

@router.callback_query(F.data == "cancel_blocked_time")
async def cancel_blocked_time(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ú–æ–∂–µ—à –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é.")

# 2Ô∏è‚É£ –•–µ–Ω–¥–ª–µ—Ä ‚Äî –ª–æ–≤–∏–º —Ç–µ–∫—Å—Ç —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
@router.message(StateFilter(MasterBlockedTime.waiting_for_blocked_time))
async def master_receive_blocked_time(message: Message, state: FSMContext):
    try:
        receive_text = message.text
        # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –≤–∏–¥–∞: 2025-07-02;10:30;13:00;–ü—Ä–∏—á–∏–Ω–∞
        parts = receive_text.split(";")
        if len(parts) < 4:
            await message.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏ —Ç–∞–∫: –¥–∞—Ç–∞;–ø–æ—á–∞—Ç–æ–∫;–∫—ñ–Ω–µ—Ü—å;–ø—Ä–∏—á–∏–Ω–∞.\n\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n2025-07-02;10:30;13:00;–ù–µ —Ö–æ—á—É –ø—Ä–∞—Ü—é–≤–∞—Ç–∏")
            return

        date_str, start_str, end_str, reason = parts
        blocked_date = datetime.strptime(date_str.strip(), "%Y-%m-%d").date()
        start_time = datetime.strptime(start_str.strip(), "%H:%M").time()
        end_time = datetime.strptime(end_str.strip(), "%H:%M").time()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏
        if start_time >= end_time:
            await message.answer("‚ö†Ô∏è –ß–∞—Å –ø–æ—á–∞—Ç–∫—É –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —Ä–∞–Ω—ñ—à–µ –∑–∞ —á–∞—Å –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è.")
            return

        master_id = 1  # –≤—Ä–µ–º–µ–Ω–Ω–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä
        now = datetime.now()

        pool = get_pool()
        async with pool.acquire() as conn:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –±–ª–æ–∫–æ–≤
            overlap_check = await conn.fetchval('''
                SELECT 1 FROM blocked_time
                WHERE master_id = $1
                  AND blocked_date = $2
                  AND NOT ($4 <= start_time OR $3 >= end_time)
                LIMIT 1
            ''', master_id, blocked_date, start_time, end_time)

            if overlap_check:
                await message.answer("‚ö†Ô∏è –ù–∞ —Ü–µ–π –ø–µ—Ä—ñ–æ–¥ –≤–∂–µ —ñ—Å–Ω—É—î –±–ª–æ–∫—É–≤–∞–Ω–Ω—è. –ü–æ–≤—Ç–æ—Ä–Ω–µ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –Ω–µ–º–æ–∂–ª–∏–≤–µ.")
                await state.clear()
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å –∑–∞–ø–∏—Å—è–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
            conflict_check = await conn.fetchval('''
                SELECT 1 FROM appointments
                WHERE master_id = $1
                  AND appointment_date = $2
                  AND stat = 'active'
                  AND NOT ($4 <= start_time OR $3 >= end_time)
                LIMIT 1
            ''', master_id, blocked_date, start_time, end_time)

            if conflict_check:
                await message.answer("‚ö†Ô∏è –ù–∞ —Ü–µ–π —á–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–ø–∏—Å–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤. –°–ø–æ—á–∞—Ç–∫—É –≤—ñ–¥–º—ñ–Ω—ñ—Ç—å –∑–∞–ø–∏—Å–∏!")
                await state.clear()
                return

            # –í—Å—Ç–∞–≤–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            await conn.execute('''
                INSERT INTO blocked_time (master_id, blocked_date, start_time, end_time, reason, created_at)
                VALUES ($1, $2, $3, $4, $5, $6)
            ''', master_id, blocked_date, start_time, end_time, reason, now)

        await message.answer("‚úÖ –ß–∞—Å —É—Å–ø—ñ—à–Ω–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ!")
        await state.clear()

    except Exception as e:
        print(f"[master_receive_blocked_time] Error: {e}")
        await message.answer("üö® –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è.")
