from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from bot.database.connection import get_pool
from bot.constants import BTN_MASTER_TIME
from bot.bot_utils import MasterTimetableStates
from aiogram.filters import StateFilter
from datetime import datetime

router = Router()

# –•–µ–Ω–¥–ª–µ—Ä —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –º–∞—Å—Ç–µ—Ä–∞ –†–æ–∑–∫–ª–∞–¥
@router.message(F.text == BTN_MASTER_TIME)
async def master_timetable_handler(message: Message, state: FSMContext):
    try:
        pool = get_pool()
        async with pool.acquire() as conn:
            row = await conn.fetchrow('''
                                      SELECT start_work_time, end_work_time
                                      FROM masters
                                      ''')

        # –ò–Ω–ª–∞–π–Ω–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìù –ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥", callback_data="change_schedule")],
                [InlineKeyboardButton(text="‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel_schedule")]
            ]
        )

        await message.answer(
            f"–ó–∞—Ä–∞–∑ —Ç–∏ –ø—Ä–∞—Ü—é—î—à –∑ {row['start_work_time'].strftime('%H:%M')} –¥–æ {row['end_work_time'].strftime('%H:%M')}\n\n"
            "–Ø–∫—â–æ —Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏ —á–∞—Å —Ä–æ–±–æ—Ç–∏ ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëá",
            reply_markup=keyboard
        )
    except Exception as e:
        print(f"[master_timetable_handler] Error: {e}")
        await message.answer("üö® –°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ "–ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥" ‚Üí –∂–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º
@router.callback_query(F.data == "change_schedule")
async def change_schedule_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(MasterTimetableStates.waiting_for_schedule)
    await callback.message.answer(
        "–í–≤–µ–¥–∏ –Ω–æ–≤–∏–π —á–∞—Å –ø–æ—á–∞—Ç–∫—É —Ç–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 9:00 14:00"
    )
    await callback.answer()

# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏" ‚Üí —Å–±—Ä–∞—Å—ã–≤–∞–µ–º state
@router.callback_query(F.data == "cancel_schedule")
async def cancel_schedule_callback(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("–û–∫–µ–π, –∑–º—ñ–Ω–∏ —Ä–æ–∑–∫–ª–∞–¥—É —Å–∫–∞—Å–æ–≤–∞–Ω—ñ.")
    await callback.answer()

# –•–µ–Ω–¥–ª–µ—Ä —Å–º–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –º–∞—Å—Ç–µ—Ä–∞ (–ø–æ —Ç–µ–∫—Å—Ç—É)
@router.message(F.text, StateFilter(MasterTimetableStates.waiting_for_schedule))
async def receive_review_text(message: Message, state: FSMContext):
    try:
        receive_text = message.text
        start_str, end_str = receive_text.split(" ")
        start = datetime.strptime(start_str, "%H:%M").time()
        end = datetime.strptime(end_str, "%H:%M").time()

        pool = get_pool()
        async with pool.acquire() as conn:
            await conn.execute('''
                               UPDATE masters
                               SET start_work_time = $1, end_work_time = $2
                               ''', start, end)

        await message.answer(f"‚úÖ –¢–µ–ø–µ—Ä —Ç–∏ –ø—Ä–∞—Ü—é—î—à –∑ {start.strftime('%H:%M')} –¥–æ {end.strftime('%H:%M')}")
        await state.clear()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º state –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

    except Exception as e:
        print(f"[master_timatable_handler_text] Error: {e}")
        await message.answer("üö® –°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö.")
