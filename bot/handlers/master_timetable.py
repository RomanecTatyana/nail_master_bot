from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from bot.database.connection import get_pool
from bot.constants import BTN_MASTER_TIME
from bot.bot_utils import MasterTimetableStates
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, date, timedelta
from dateutil.relativedelta import relativedelta
from collections import defaultdict
from aiogram.filters import StateFilter


router = Router()

# –•–µ–Ω–¥–ª–µ—Ä —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –º–∞—Å—Ç–µ—Ä–∞ –†–æ–∑–∫–ª–∞–¥
@router.message(F.text == BTN_MASTER_TIME)
async def master_timetable_handler(message: Message, state: FSMContext):
    try:
        pool = get_pool()
        async with pool.acquire() as conn:
            row = await conn.fetchrow('''
                                      SELECT start_work_time, end_work_time
                                      FROM masters
                                      ''')
        await state.set_state(MasterTimetableStates.waiting_for_schedule)
        await message.answer(f"–ó–∞—Ä–∞–∑ —Ç–∏ –ø—Ä–∞—Ü—é—î—à –∑ {row['start_work_time'].strftime(('%H:%M'))} –¥–æ {row['end_work_time'].strftime(('%H:%M'))}\n\n–Ø–∫—â–æ —Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏ —á–∞—Å —Ä–æ–±–æ—Ç–∏, —Ç–æ –≤ –ø–æ–ª—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–≤–µ–¥–∏ –Ω–æ–≤–∏–π —á–∞—Å –ø–æ—á–∞—Ç–∫—É —Ç–∞ —á–∞—Å –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, 9:00 14:00")
    except Exception as e:
        print(f"[master_timatable_handler] Error: {e}")
        await message.answer("üö® –°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

# –•–µ–Ω–¥–ª–µ—Ä —Å–º–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –º–∞—Å—Ç–µ—Ä–∞
@router.message(F.text, StateFilter(MasterTimetableStates.waiting_for_schedule))
async def receive_review_text(message: Message, state: FSMContext):
    try:
        receive_text = message.text
        start_str, end_str = receive_text.split(" ")
        start = datetime.strptime(start_str, "%H:%M").time()
        end = datetime.strptime(end_str, "%H:%M").time()
        print(start, end)
        pool = get_pool()
        async with pool.acquire() as conn:
            await conn.execute('''
                               UPDATE masters
                               SET start_work_time = $1, end_work_time = $2
                               ''', start, end)
        await message.answer(f"–¢–µ–ø–µ—Ä —Ç–∏ –ø—Ä–∞—Ü—é—î—à –∑ {start} –¥–æ {end}")
    except Exception as e:
        print(f"[master_timatable_handler_text] Error: {e}")
        await message.answer("üö® –°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö.")