from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from bot.database.connection import get_pool
from bot.constants import BTN_MASTER_APPOINT
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, date, timedelta
from dateutil.relativedelta import relativedelta
from collections import defaultdict

router = Router()

#–•–µ–Ω–¥–ª–µ—Ä —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –º–∞—Å—Ç–µ—Ä–∞ –ó–∞–ø–∏—Å–∏. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
@router.message(F.text == BTN_MASTER_APPOINT)
async def master_appointment_hendler(message: Message, state: FSMContext):
    try:
        print(BTN_MASTER_APPOINT)
        inline_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–°—å–æ–≥–æ–¥–Ω—ñ", callback_data="today"), InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data="tomorrow")],
            [InlineKeyboardButton(text="–¢–∏–∂–¥–µ–Ω—å", callback_data="week"), InlineKeyboardButton(text="–ú—ñ—Å—è—Ü—å", callback_data="month")]
        ])
        await message.answer(
            "–ó–∞ —è–∫–∏–π –ø–µ—Ä—ñ–æ–¥ –±–∞–∂–∞—î—à –≤–∏–≤–µ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏?\n\n–û–±–∏—Ä–∞–π –Ω–∏–∂—á–µ üëá",
            reply_markup=inline_kb 
        ) 
    except Exception as e:
        print(f"[master_appointment_hendler] Error: {e}")
        await message.answer("üö® –°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω –≤—ã–±–æ—Ä–∞ –°–µ–≥–æ–¥–Ω—è
@router.callback_query(F.data.startswith("today"))
async def choose_today(callback: CallbackQuery, state: FSMContext):
    try:
        today = date.today()
        time = datetime.now().time()
        pool = get_pool()

        async with pool.acquire() as conn:
            rows = await conn.fetch('''
                                    SELECT a.id, a.appointment_date, a.start_time, a.service_id, a.client_id,
                                             s.service_name,
                                             c.full_name,
                                             cn.note
                                    FROM appointments a
                                    JOIN services s ON a.service_id = s.id
                                    JOIN clients c ON a.client_id = c.id
                                    LEFT JOIN client_notes cn ON a.client_id = cn.client_id
                                    WHERE a.appointment_date = $1
                                        AND a.start_time > $2
                                        AND a.stat = $3
                                    ORDER BY a.start_time''', today, time, 'active')
            if not rows:
                await callback.message.answer("üòî –ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –∑–∞–ø–∏—Å—ñ–≤ –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î.")
                return
            response = "<b>–ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ —î —Ç–∞–∫—ñ –∑–∞–ø–∏—Å–∏</b>\n\n"
            for row in rows:
                response += f"<b>{row['start_time'].strftime('%H:%M')}</b> - {row['service_name']} - {row['full_name']}\n"
                note = row['note']
                if note:
                    response += f"<b>–ü—Ä–∏–º—ñ—Ç–∫–∞:</b> {note}\n\n"
            response += f"–•–æ—á–µ—à –∫–æ–≥–æ—Å—å –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏? –í–∏–±–µ—Ä–∏ –Ω–∏–∂—á–µ üëá"
            keyboard = []
            for row in rows:
                btn_text = f"{row['start_time'].strftime('%H:%M')}"
                callback_data = f"cancel_master;{row['id']};{row['appointment_date']};{row['start_time']}"
                keyboard.append([InlineKeyboardButton(text=btn_text, callback_data=callback_data)])
                
            await callback.message.answer(response, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
    except Exception as e:
        print(f"[choose_today] Error: {e}")
        await callback.message.answer("üö® –°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å—ñ–≤ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ.") 


#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω –≤—ã–±–æ—Ä–∞ –ó–∞–≤—Ç—Ä–∞
@router.callback_query(F.data.startswith("tomorrow"))
async def choose_tomorrow(callback: CallbackQuery, state: FSMContext, ):
    try:
        start_date = datetime.now() + timedelta(days=1)
        end_date = start_date
        
        pool = get_pool()
        async with pool.acquire() as conn:
            rows = await conn.fetch('''
                                    SELECT a.id, a.appointment_date, a.start_time, a.service_id, a.client_id,
                                             s.service_name,
                                             c.full_name,
                                             cn.note
                                    FROM appointments a
                                    JOIN services s ON a.service_id = s.id
                                    JOIN clients c ON a.client_id = c.id
                                    LEFT JOIN client_notes cn ON a.client_id = cn.client_id
                                    WHERE a.appointment_date >= $1
                                        AND a.appointment_date <= $2
                                        AND a.stat = $3
                                    ORDER BY a.start_time''', start_date, end_date, 'active')
            if not rows:
                await callback.message.answer("üòî –ù–∞ —Ü–µ–π –ø–µ—Ä—ñ–æ–¥ –∑–∞–ø–∏—Å—ñ–≤ –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î.")
                return
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º rows –ø–æ –¥–∞—Ç–µ
            grouped = defaultdict(list)
            for row in rows:
                grouped[row['appointment_date']].append(row)
            response = "<b>–ù–∞ —Ü–µ–π –ø–µ—Ä—ñ–æ–¥ —î —Ç–∞–∫—ñ –∑–∞–ø–∏—Å–∏</b>\n\n"   
            for date, records in grouped.items():
                response += f"üìÖ <b>–î–∞—Ç–∞:</b> {date}\n"

                for row in records:
                    response += f"<b><u>{row['start_time'].strftime('%H:%M')}</u></b>\n"
                    response += f"{row['service_name']} - {row['full_name']}\n"
                    note = row['note']
                    if note:
                        response += f"üìù <b>–ü—Ä–∏–º—ñ—Ç–∫–∞:</b> {note}\n\n"
                response += "\n"  # –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏
            
            response += f"–•–æ—á–µ—à –∫–æ–≥–æ—Å—å –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏? –í–∏–±–µ—Ä–∏ –Ω–∏–∂—á–µ üëá"
            keyboard = []
            for row in rows:
                btn_text = f"{row['start_time'].strftime('%H:%M')}"
                callback_data = f"cancel_master;{row['id']};{row['appointment_date']};{row['start_time']}"
                keyboard.append([InlineKeyboardButton(text=btn_text, callback_data=callback_data)])
                
            await callback.message.answer(response, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
    except Exception as e:
        print(f"[choose_tomorrow] Error: {e}")
        await callback.message.answer("üö® –°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å—ñ–≤ –Ω–∞ –≤–∏–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥.") 

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω –≤—ã–±–æ—Ä–∞ –¢–∏–∂–¥–µ–Ω—å
@router.callback_query(F.data.startswith("week"))
async def choose_tomorrow(callback: CallbackQuery, state: FSMContext, ):
    try:
        start_date = datetime.now()
        end_date = datetime.now() + timedelta(weeks=1)
        
        pool = get_pool()
        async with pool.acquire() as conn:
            rows = await conn.fetch('''
                                    SELECT a.id, a.appointment_date, a.start_time, a.service_id, a.client_id,
                                             s.service_name,
                                             c.full_name,
                                             cn.note
                                    FROM appointments a
                                    JOIN services s ON a.service_id = s.id
                                    JOIN clients c ON a.client_id = c.id
                                    LEFT JOIN client_notes cn ON a.client_id = cn.client_id
                                    WHERE a.appointment_date >= $1
                                        AND a.appointment_date <= $2
                                        AND a.stat = $3
                                    ORDER BY a.appointment_date, a.start_time''', start_date, end_date, 'active')
            if not rows:
                await callback.message.answer("üòî –ù–∞ —Ü–µ–π –ø–µ—Ä—ñ–æ–¥ –∑–∞–ø–∏—Å—ñ–≤ –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î.")
                return
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º rows –ø–æ –¥–∞—Ç–µ
            grouped = defaultdict(list)
            for row in rows:
                grouped[row['appointment_date']].append(row)
            response = "<b>–ù–∞ —Ü–µ–π –ø–µ—Ä—ñ–æ–¥ —î —Ç–∞–∫—ñ –∑–∞–ø–∏—Å–∏</b>\n\n"   
            for date, records in grouped.items():
                response += f"üìÖ <b>–î–∞—Ç–∞:</b> {date}\n"

                for row in records:
                    response += f"<b><u>{row['start_time'].strftime('%H:%M')}</u></b>\n"
                    response += f"{row['service_name']} - {row['full_name']}\n"
                    note = row['note']
                    if note:
                        response += f"üìù <b>–ü—Ä–∏–º—ñ—Ç–∫–∞:</b> {note}\n\n"
                response += "\n"  # –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏
            
            response += f"–•–æ—á–µ—à –∫–æ–≥–æ—Å—å –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏? –í–∏–±–µ—Ä–∏ –Ω–∏–∂—á–µ üëá"
            keyboard = []
            for row in rows:
                btn_text = f"{row['appointment_date']}  {row['start_time'].strftime('%H:%M')}"
                callback_data = f"cancel_master;{row['id']};{row['appointment_date']};{row['start_time']}"
                keyboard.append([InlineKeyboardButton(text=btn_text, callback_data=callback_data)])
                
            await callback.message.answer(response, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
    except Exception as e:
        print(f"[choose_week Error: {e}")
        await callback.message.answer("üö® –°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å—ñ–≤ –Ω–∞ –≤–∏–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥.")         

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω –≤—ã–±–æ—Ä–∞ –ú—ñ—Å—è—Ü—å
@router.callback_query(F.data.startswith("month"))
async def choose_tomorrow(callback: CallbackQuery, state: FSMContext, ):
    try:
        start_date = datetime.now()
        end_date = start_date + relativedelta(months=1)
        
        pool = get_pool()
        async with pool.acquire() as conn:
            rows = await conn.fetch('''
                                    SELECT a.id, a.appointment_date, a.start_time, a.service_id, a.client_id,
                                             s.service_name,
                                             c.full_name,
                                             cn.note
                                    FROM appointments a
                                    JOIN services s ON a.service_id = s.id
                                    JOIN clients c ON a.client_id = c.id
                                    LEFT JOIN client_notes cn ON a.client_id = cn.client_id
                                    WHERE a.appointment_date >= $1
                                        AND a.appointment_date <= $2
                                        AND a.stat = $3
                                    ORDER BY a.appointment_date, a.start_time''', start_date, end_date, 'active')
            if not rows:
                await callback.message.answer("üòî –ù–∞ —Ü–µ–π –ø–µ—Ä—ñ–æ–¥ –∑–∞–ø–∏—Å—ñ–≤ –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î.")
                return
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º rows –ø–æ –¥–∞—Ç–µ
            grouped = defaultdict(list)
            for row in rows:
                grouped[row['appointment_date']].append(row)
            response = "<b>–ù–∞ —Ü–µ–π –ø–µ—Ä—ñ–æ–¥ —î —Ç–∞–∫—ñ –∑–∞–ø–∏—Å–∏</b>\n\n"   
            for date, records in grouped.items():
                response += f"üìÖ <b>–î–∞—Ç–∞:</b> {date}\n"

                for row in records:
                    response += f"<b><u>{row['start_time'].strftime('%H:%M')}</u></b>\n"
                    response += f"{row['service_name']} - {row['full_name']}\n"
                    note = row['note']
                    if note:
                        response += f"üìù <b>–ü—Ä–∏–º—ñ—Ç–∫–∞:</b> {note}\n\n"
                response += "\n"  # –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏
            
            response += f"–•–æ—á–µ—à –∫–æ–≥–æ—Å—å –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏? –í–∏–±–µ—Ä–∏ –Ω–∏–∂—á–µ üëá"
            keyboard = []
            for row in rows:
                btn_text = f"{row['appointment_date']}  {row['start_time'].strftime('%H:%M')}"
                callback_data = f"cancel_master;{row['id']};{row['appointment_date']};{row['start_time']}"
                keyboard.append([InlineKeyboardButton(text=btn_text, callback_data=callback_data)])
                
            await callback.message.answer(response, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
    except Exception as e:
        print(f"[choose_month] Error: {e}")
        await callback.message.answer("üö® –°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å—ñ–≤ –Ω–∞ –≤–∏–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥.")                      
# –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ –∏–Ω–ª–∞–π–Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–µ
@router.callback_query(F.data.startswith("cancel_master"))
async def choose_today(callback: CallbackQuery, state: FSMContext):
    try:
        _, id_str, appoint_date, start_time = callback.data.split(";")
        id = int(id_str)
        await state.update_data(
            id = id,
            appoint_date = appoint_date,
            start_time = start_time
        )
        #print(date)
        pool = get_pool()
        async with pool.acquire() as conn:
            await conn.execute('''
                           UPDATE appointments
                           SET stat = 'canceled_by_master'
                           WHERE id = $1
                ''', id)
        # –¥–æ—Å—Ç–∞—ë–º telegram_id –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏
            row = await conn.fetchrow('''
             SELECT c.telegram_id, s.service_name
                FROM appointments a
                    JOIN clients c ON a.client_id = c.id
                    JOIN services s ON a.service_id = s.id
                WHERE a.id = $1
            ''', id)

        if row:
            client_telegram_id = row['telegram_id']
            service_name = row['service_name']
        #–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É
        await callback.message.answer(f"–¢–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∞ –∑–∞–ø–∏—Å {appoint_date} –Ω–∞ {start_time}")
        
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.bot.send_message(
        chat_id=client_telegram_id,
        text=f"‚ùó –í–∞—à –∑–∞–ø–∏—Å –Ω–∞ {service_name} {appoint_date} –æ {start_time} –±—É–≤ —Å–∫–∞—Å–æ–≤–∞–Ω–∏–π –º–∞–π—Å—Ç—Ä–æ–º."
    )
    except Exception as e:
        print(f"[cancel_master] Error: {e}")
        await callback.message.answer("üö® –°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å—É.") 