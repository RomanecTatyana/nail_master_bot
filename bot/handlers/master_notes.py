from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from bot.database.connection import get_pool
from bot.constants import BTN_NOTES
from bot.bot_utils import MasterTimetableStates1
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, date, timedelta
from dateutil.relativedelta import relativedelta
from collections import defaultdict
from aiogram.filters import StateFilter

router = Router()

# –•–µ–Ω–¥–ª–µ—Ä —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –º–∞—Å—Ç–µ—Ä–∞ –ü—Ä–∏–º—ñ—Ç–∫–∏
@router.message(F.text == BTN_NOTES)
async def master_notes_hendler(message: Message, state: FSMContext):
    try:
        stat = "done"
        pool = get_pool()
        async with pool.acquire() as conn:
            rows = await conn.fetch('''SELECT DISTINCT ON (c.id) 
                                        c.id, 
                                        c.full_name,
                                        a.appointment_date,
                                        a.end_time
                                        FROM clients c
                                        JOIN appointments a ON c.id = a.client_id
                                        WHERE a.stat = $1
                                        ORDER BY c.id, a.appointment_date DESC, a.end_time DESC
                                        LIMIT 10''', stat)
        keyboard = []
        for row in rows:
            btn_text = row['full_name']
            callback_data = f"client_name;{row['id']}"
            keyboard.append([InlineKeyboardButton(text=btn_text, callback_data=callback_data)])
            inline_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await message.answer(f"–û–±–µ—Ä–∏ –∫–ª—ñ—î–Ω—Ç–∞, –ø—Ä–æ —è–∫–æ–≥–æ —Ö–æ—á–µ—à –∑–∞–ª–∏—à–∏—Ç–∏ —Å–æ–±—ñ –ø–æ–º—ñ—Ç–∫—É", reply_markup=inline_markup)
    except Exception as e:
        print(f"[master_notes_handler] Error: {e}")
        await message.answer("üö® –°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")  
        
#–ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –ø–æ–º–µ—Ç–æ–∫ –æ –∫–ª–∏–µ–Ω—Ç–µ
@router.callback_query(F.data.startswith("client_name"))
async def master_notes(callback: CallbackQuery, state: FSMContext):
    try:
        _, id_str = callback.data.split(";")
        id = int(id_str)
        await state.update_data(id=id)
        await state.set_state(MasterTimetableStates1.waiting_for_client_note)
        await callback.message.answer(
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–º—ñ—Ç–∫—É –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞. –ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—à ‚Äî —è —ó—ó –∑–±–µ—Ä–µ–∂—É –≤ –±–∞–∑—É."
        )
        review_text = callback.message.text
        print(review_text)
    except Exception as e:
        print(f"[master_notes] Error: {e}")
        await callback.message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –¥–∞–Ω–∏—Ö –≤ –±–∞–∑—É")    
    
    @router.message(F.text, StateFilter(MasterTimetableStates1.waiting_for_client_note))
    async def receive_client_note(message: Message, state: FSMContext):
        try:
            data = await state.get_data()
            client_id = data.get("id")
            master_id = 1  # –ø–æ–∫–∞ –≤—Ä—É—á–Ω—É—é, –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
            note_text = message.text
            now = datetime.now()

            pool = get_pool()
            async with pool.acquire() as conn:
                await conn.execute('''
                INSERT INTO client_notes (client_id, master_id, note, created_at)
                VALUES ($1, $2, $3, $4)
            ''', client_id, master_id, note_text, now)

            await message.answer("‚úÖ –ü–æ–º—ñ—Ç–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –î—è–∫—É—é üôè")
        
        except Exception as e:
            print(f"[receive_client_note] Error: {e}")
            await message.answer("üö® –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø–æ–º—ñ—Ç–∫–∏.")
        # –ß–∏—Å—Ç–∏–º state, —á—Ç–æ–±—ã –±–æ–ª—å—à–µ –Ω–µ –ª–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç
        await state.clear()