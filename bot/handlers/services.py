from aiogram import Router, F, types, Bot
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, WebAppInfo, WebAppData
from aiogram.filters import Command
import asyncpg
from ..constants import BTN_SERVICES
from bot.keyboards.menu import build_services_keyboard
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot.database.connection import get_pool
from aiogram.fsm.context import FSMContext
import json
from urllib.parse import quote
router = Router()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /services ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
@router.message(Command("services"))
async def services_handler(message: Message):
    try:
        pool = get_pool()
        async with pool.acquire() as conn:
            rows = await conn.fetch("SELECT id, service_name, duration_minutes FROM services")

            if not rows:
                await message.answer("üòî –ü–æ—Å–ª—É–≥–∏ —â–µ –Ω–µ –¥–æ–¥–∞–Ω—ñ.")
                return

            response = "üíÖ <b>–î–æ—Å—Ç—É–ø–Ω—ñ –ø–æ—Å–ª—É–≥–∏:</b>\n\n"
            service_names = []
            for row in rows:
                response += f"‚Ä¢ {row['service_name']} ‚Äî {row['duration_minutes']} —Ö–≤\n"
                service_names.append(row['service_name'])

            response += "\n–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É –Ω–∏–∂—á–µ üëá"

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            builder = InlineKeyboardBuilder()
            for row in rows:
                builder.button(
                    text=row['service_name'],
                    callback_data=f"choose_service:{row['id']}:{row['service_name']}:{row['duration_minutes']}",
                )
            builder.adjust(2)  # –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥

            await message.answer(response, reply_markup=builder.as_markup(), parse_mode="HTML")

    except Exception as e:
        await message.answer("üö® –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –ø–æ—Å–ª—É–≥.")
        print(f"[services_handler] Error: {e}")

# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º —É—Å–ª—É–≥
@router.message(F.text == BTN_SERVICES)
async def services_button_handler(message: Message):
    await services_handler(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏ –∏–∑ inline-–∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data.startswith("choose_service:"))
async def choose_service_handler(callback: CallbackQuery, state: FSMContext):
    try:
        _, service_id, service_name, service_duration = callback.data.split(":")
        # 1. –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        telegram_id = callback.from_user.id
        chat_id = callback.message.chat.id
        print (telegram_id, chat_id)
               # 2. –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ
        pool = get_pool()
        async with pool.acquire() as conn:
            row = await conn.fetchrow("SELECT id FROM clients WHERE telegram_id = $1", telegram_id)
        
        if not row:
            await callback.message.answer("–ö–ª—ñ—î–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.")
            return

        client_id = row["id"]  # 3. –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID

        # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            service_id=service_id,
            service_name=service_name,
            service_duration=service_duration,
            client_id=client_id,
            chat_id=telegram_id
        )

        # 5. –§–æ—Ä–º–∏—Ä—É–µ–º WebApp URL
        web_app_url = (
            f"https://1fb1-46-63-12-99.ngrok-free.app"
            f"?duration_minutes={service_duration}"
            f"&service_id={service_id}"
            f"&service_name={service_name}"
            f"&client_id={client_id}"
            f"&chat_id={chat_id}"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
            text="üóì –í–∏–±—Ä–∞—Ç–∏ –¥–∞—Ç—É",
            web_app=WebAppInfo(url=web_app_url)
        )]])

        await callback.message.answer(
            f"–í–∏ –æ–±—Ä–∞–ª–∏ –ø–æ—Å–ª—É–≥—É {service_name}. –¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É —É –≤—ñ–∫–Ω—ñ –Ω–∏–∂—á–µ üëá",
            reply_markup=keyboard
        )
        
    except Exception as e:
        print(f"[choose_service_handler] Error: {e}")
        await callback.message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∏–±—Ä–∞–Ω–æ—ó –ø–æ—Å–ª—É–≥–∏.")

# # –ù–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp
# @router.message(F.WebAppData.web_app_data)
# async def handle_webapp_data(message: Message, state: FSMContext):
#     print("=== WebApp DATA handler triggered ===")
#     print(f"RAW: {message}")
#     print("üì• handle_webapp_data –≤—ã–∑–≤–∞–Ω!")
#     print(f"üì® message.web_app_data.data = {message.web_app_data.data}")
    

#     try:
#         raw_data = message.web_app_data.data  # —Å—Ç—Ä–æ–∫–∞ JSON
#         print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {raw_data}")

#         data = json.loads(raw_data)  # –ü–∞—Ä—Å–∏–º JSON –≤ —Å–ª–æ–≤–∞—Ä—å
#         print(f"üìã –†–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")

#         selected_date = data.get("date")
#         selected_time = data.get("time")

#         await state.update_data(
#             selected_date=selected_date,
#             selected_time=selected_time
#         )

#         await message.answer(f"üóì –í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_date} –≤ {selected_time}")
#     except Exception as e:
#         print(f"[handle_webapp_data] ‚ùå –û—à–∏–±–∫–∞: {e}")
#         await message.answer("üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.")